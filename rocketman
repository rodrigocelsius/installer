#!/bin/bash
# -*- coding: utf-8 -*-
#
#  rocketman.py
#
#  Copyright © 2018 Rocket OS
#
#  This file is part of Rocket Man Installer.
#
#  Rocket Man Installer is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  Rocket Man Installer is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The following additional terms are in effect as per Section 7 of the license:
#
#  The preservation of all legal notices and author attributions in
#  the material or in the Appropriate Legal Notices displayed
#  by works containing it is required.
#
#  You should have received a copy of the GNU General Public License
#  along with Rocket Man Installer; If not, see <http://www.gnu.org/licenses/>.

# --> VARIABLES
HOSTN=RocketOS 
LOCALE=America/Sao_Paulo
ROOT_PASSWD=123456
USER=rocketman
USER_PASSWD=123456

# PARTED VARIABLES
HD=/dev/sda
ROOT_SIZE=8000

# File System
ROOT_FS=ext4

KEYBOARD_LAYOUT=br-abnt2
LANGUAGE=pt_BR
LANGUAGE_UTF=pt_BR.UTF-8

# AUX VARIABLES
ROOT_START=1
ROOT_END=$(($ROOT_START+$ROOT_SIZE))

function inicializa_hd
{
  echo "Inicializando o HD"
  # Configura o tipo da tabela de partições (Ignorando erros)
  parted -s $HD mklabel msdos &> /dev/null

  # Remove qualquer partição antiga
  parted -s $HD rm 1 &> /dev/null
  parted -s $HD rm 2 &> /dev/null
  parted -s $HD rm 3 &> /dev/null
  parted -s $HD rm 4 &> /dev/null
}

function particiona_hd
{
  ERR=0
  # Cria partição root
  echo "Criando partição root"
  parted -s $HD mkpart primary $ROOT_FS $ROOT_START $ROOT_END 1>/dev/null || ERR=1

  if [[ $ERR -eq 1 ]]; then
    echo "Erro durante o particionamento"
    exit 1
  fi
}

function cria_fs
{
  ERR=0
  # Formata partições root, home e boot para o File System especificado
  echo "Formatando partição root"
  mkfs.$ROOT_FS /dev/sda1 -L Root 1>/dev/null || ERR=1

  if [[ $ERR -eq 1 ]]; then
    echo "Erro ao criar File Systems"
    exit 1
  fi
}

function monta_particoes
{
  ERR=0
  echo "Montando partições"
  # Monta partição root
  mount /dev/sda1 /mnt || ERR=1

  if [[ $ERR -eq 1 ]]; then
    echo "Erro ao criar File Systems"
    exit 1
  fi
}

function configurando_pacman
{
  echo "Configurando pacman"
  cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bkp
  sed "s/^Ser/#Ser/" /etc/pacman.d/mirrorlist > /tmp/mirrors
  sed '/Brazil/{n;s/^#//}' /tmp/mirrors > /etc/pacman.d/mirrorlist

  if [ "$(uname -m)" = "x86_64" ]
  then
    cp /etc/pacman.conf /etc/pacman.conf.bkp
    # Adiciona o Multilib
    sed '/^#\[multilib\]/{s/^#//;n;s/^#//;n;s/^#//}' /etc/pacman.conf > /tmp/pacman
    mv /tmp/pacman /etc/pacman.conf
  fi
}

function instalando_sistema
{
  ERR=0
  echo "Rodando pactrap base base-devel"
  pacstrap /mnt base base-devel || ERR=1
  echo "Rodando pactrap grub-bios"
  pacstrap /mnt grub-bios || ERR=1
  echo "Rodando genfstab"
  genfstab -p /mnt >> /mnt/etc/fstab || ERR=1

  if [[ $ERR -eq 1 ]]; then
    echo "Erro ao instalar sistema"
    exit 1
  fi
}

loadkeys $KEYBOARD_LAYOUT

# PARTED
inicializa_hd
particiona_hd
cria_fs
monta_particoes

# INSTALL
configurando_pacman
instalando_sistema

# CHROOT MODE
arch-chroot /mnt << EOF
# Configura locale.gen
cp /etc/locale.gen /etc/locale.gen.bkp
sed 's/^#'$LANGUAGE_UTF'/'$LANGUAGE_UTF/ /etc/locale.gen > /tmp/locale
mv /tmp/locale /etc/locale.gen
locale-gen

# Configura locale.conf
export LANG=$LANGUAGE_UTF
echo 'LANG='$LANGUAGE_UTF > /etc/locale.conf

# Configura hora
rm -rf /etc/localtime
ln -s /usr/share/zoneinfo/$LOCALE /etc/localtime
hwclock --systohc --utc

# Configura hostname
echo $HOSTN > /etc/hostname

# Configura rede (DHCP via eth0)
systemctl enable dhcpcd.service

# Instalar e habilitar ssh
pacman -Sy --noconfirm openssh
systemctl enable sshd.service

# Altera a senha do usuário root
echo -e $ROOT_PASSWD"\n"$ROOT_PASSWD | passwd root

# Adiciona usuário
useradd -m -g users -G wheel -s /bin/bash $USER
echo -e $USER_PASSWD"\n"$USER_PASSWD | passwd $

# Configura sudoers
echo $LANGUAGE 'ALL=(ALL) ALL' >> /etc/sudoers

# Configura ambiente ramdisk inicial
mkinitcpio -p linux

# Configurando pacman
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bkp
sed "s/^Ser/#Ser/" /etc/pacman.d/mirrorlist > /tmp/mirrors
sed '/Brazil/{n;s/^#//}' /tmp/mirrors > /etc/pacman.d/mirrorlist

if [ "$(uname -m)" = "x86_64" ]
  then
    cp /etc/pacman.conf /etc/pacman.conf.bkp
    # Adiciona o Multilib
    sed '/^#\[multilib\]/{s/^#//;n;s/^#//;n;s/^#//}' /etc/pacman.conf > /tmp/pacman
    mv /tmp/pacman /etc/pacman.conf
  fi

pacman -Syu

gpasswd -a $USER audio
gpasswd -a $USER video
gpasswd -a $USER daemon
gpasswd -a $USER dbus
gpasswd -a $USER disk
gpasswd -a $USER games
gpasswd -a $USER lp
gpasswd -a $USER network
gpasswd -a $USER rfkill
gpasswd -a $USER optical
gpasswd -a $USER power
gpasswd -a $USER scanner
gpasswd -a $USER storage

# Instalando ambiente gráfico
pacman -S --noconfirm xorg xorg-xinit

# Instalado Budgie Linux
pacman -S --noconfirm budgie-desktop gnome

# Instalado Lightdm
pacman -S --noconfirm lightdm lightdm-gtk-greeter
systemctl enable lightdm.service

# Instalado Programas
pacman -S --noconfirm firefox qt4 vlc gimp flashplugin gedit archlinux-wallpaper

# Instalando complementos VirtualBox
pacman -S --noconfirm virtualbox-guest-utils
systemctl enable vboxservice.service

# Instala e gera configuração do GRUB Legacy
pacman -S --noconfirm grub
grub-install /dev/sda
grub-mkconfig -o /boot/grub/grub.cfg
EOF

echo "Umounting partitions"
umount /mnt/{boot,home,}
reboot